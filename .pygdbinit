# A rewrite of the Python interpreter's line number calculator in GDB's
# command language
define lineno
   set $__continue = 1
   set $__co = f->f_code
   set $__lasti = f->f_lasti
   set $__sz = ((PyStringObject *)$__co->co_lnotab)->ob_size/2
   set $__p = (unsigned char *)((PyStringObject *)$__co->co_lnotab)->ob_sval
   set $__li = $__co->co_firstlineno
   set $__ad = 0
   while ($__sz-1 >= 0 && $__continue)
     set $__sz = $__sz - 1
     set $__ad = $__ad + *$__p
     set $__p = $__p + 1
     if ($__ad > $__lasti)
	set $__continue = 0
     end
     set $__li = $__li + *$__p
     set $__p = $__p + 1
   end
   printf "%d", $__li
end

set $CALL_FUNCTION = 131
set $CALL_FLAG_VAR = 2
set $CALL_FLAG_KW = 1

define pyframe
  set $__na = (int) next_instr[-2]
  set $__nkw = (int) next_instr[-1]
  set $__flags = ((next_instr[-3] - $CALL_FUNCTION) & 3)
  set $__nstack = $__na + 2 * $__nkw + ($__flags & $CALL_FLAG_VAR ? 1 : 0) + ($__flags & $CALL_FLAG_KW ? 1 : 0)
  set $__func = stack_pointer[-($__nstack+1)]
  set $__self = (PyObject *) 0
  if ($__func->ob_type == &PyMethod_Type)
    set $__self = (((PyCFunctionObject *)$__func)->m_self)
    set $__func = (((PyCFunctionObject *)$__func)->m_ml->ml_meth)
  end
  set $__context = (char *)((PyStringObject *)co->co_name)->ob_sval
  set $__funcname = PyEval_GetFuncName($__func)
  set $__funcdesc = PyEval_GetFuncDesc($__func)
  set $__fn = (char *)((PyStringObject *)co->co_filename)->ob_sval
  printf "== %s > %s%s%s%s at %s:", $__context, \
    ($__self ? $__self->ob_type->tp_name : ""), \
    ($__self ? ":" : ""), $__funcname, $__funcdesc, \
    $__fn
  lineno
  printf "\n"
## Uncomment these lines when using from within Emacs/XEmacs so it will
### automatically track/display the current Python source line
#    printf "%c%c%s:", 032, 032, $__fn
#    lineno
#    printf ":1\n"
end

# Here's a somewhat fragile way to print the entire Python stack from gdb.
# It's fragile because the tests for the value of $pc depend on the layout
# of specific functions in the C source code.

# Explanation of while and if tests: We want to pop up the stack until we
# land in Py_Main (this is probably an incorrect assumption in an embedded
# interpreter, but the test can be extended by an interested party).  If
# Py_Main <= $pc <= Py_GetArgcArv is true, $pc is in Py_Main(), so the while
# tests succeeds as long as it's not true.  In a similar fashion the if
# statement tests to see if we are in PyEval_EvalFrameEx().

# Note: The name of the main interpreter function and the function which
# follow it has changed over time.  This version of pystack works with this
# version of Python.  If you try using it with older or newer versions of
# the interpreter you may will have to change the functions you compare with
# $pc.

define pystack_thread
  set $__ctr = 0
  set $__inlined = 0
  while $__ctr < 200
    frame
    if $__inlined == 0
      if ($pc >= PyEval_EvalFrameEx && $pc < PyEval_EvalCodeEx)
        set $__rsp = $rsp
        while $pc >= PyEval_EvalFrameEx && $pc < PyEval_EvalCodeEx && $rsp == $__rsp
	  set $__inlined = $__inlined + 1
          up-silently 1
        end
        down-silently $__inlined
      end
    end
    if $__inlined == 1
      pyframe
    end
    if $__inlined > 0
      set $__inlined = $__inlined - 1
    end
    if ($pc >= __libc_start_main && $pc < gnu_get_libc_release) || ($pc >= __clone && $pc < __umount)
      loop_break
    end
    up-silently 1
    set $__ctr = $__ctr + 1
  end
end

define pystack
thread apply all pystack_thread
end
